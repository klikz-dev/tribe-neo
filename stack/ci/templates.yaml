# ╭─ Gloabl Templates ────────────────────────────────╮
# │
.commonProperty:
  interruptible: true
  image: fsha/yarn-3.1:bash
  tags:
    - tribe_runner
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
# │
# ├───────────────────────────────────────────────────
# │
.buildTemplate:
  stage: build
  needs:
    - prepare:packages
    - prepare:env
  extends:
    - .commonProperty
    - .onlyPullCache
  before_script:
    - |
      checksum="CHECKSUM.SHA"
      new_checksum="$checksum.temp"
      touch $checksum
      touch $new_checksum
      touch report.env
      touch BUILD.VERSION
      if [[ -z "$(cat BUILD.VERSION)" ]]; then
        echo "$BUILD_VERSION" > BUILD.VERSION
      fi
    - |
      echo "Generating checksum for @tribeplatform/$LOCAL_PACKAGE_NAME..."
      package_path="packages/$LOCAL_PACKAGE_NAME"
      echo "$(./scripts/package-checksum.sh $package_path)" >> $new_checksum
    - |
      echo "Calculating package changes..."
      if [[ "$(cat $checksum)" != "$(cat $new_checksum)" ]]; then
        env_name=$(echo "${LOCAL_PACKAGE_NAME//[ -]/_}_CHANGED" | tr '[:lower:]' '[:upper:]')
        export "$env_name=true"
        echo "$env_name=true" >> report.env
      fi
    - cat $checksum
    - cat $new_checksum
    - mv $new_checksum $checksum
  script:
    - |
      if ./scripts/should-build.sh $LOCAL_PACKAGE_NAME; then
        echo -e "Building $LOCAL_PACKAGE_NAME"
        yarn $LOCAL_PACKAGE_NAME build
        echo "$BUILD_VERSION" > BUILD.VERSION
      else
        echo -e "$LOCAL_PACKAGE_NAME has already been built."
        echo "$(echo ${LOCAL_PACKAGE_NAME//[ -]/_}_BUILD_REUSED | tr '[:lower:]' '[:upper:]')=true" >> report.env
      fi

      echo "REAL_BUILD_VERSION=$(cat BUILD.VERSION)" >> report.env
    - cat report.env
  cache:
    - !reference [.onlyPullCache, cache]
    - key: $LOCAL_PACKAGE_NAME-cache-$CI_COMMIT_REF_SLUG
      paths:
        - packages/$LOCAL_PACKAGE_NAME/build
      policy: pull-push
    - key: $LOCAL_PACKAGE_NAME-checksum-$CI_COMMIT_REF_SLUG
      paths:
        - CHECKSUM.SHA
      policy: pull-push
    - key: $LOCAL_PACKAGE_NAME-build-version-$CI_COMMIT_REF_SLUG
      paths:
        - BUILD.VERSION
      policy: pull-push
  artifacts:
    paths:
      - $CI_PROJECT_DIR/packages/$LOCAL_PACKAGE_NAME/build
    reports:
      dotenv: report.env
  variables:
    CI: "false"
# │
# ├───────────────────────────────────────────────────
# │
.publishTemplate:
  stage: publish
  extends:
    - .commonProperty
    - .disableCache
# │
# ├───────────────────────────────────────────────────
# │
.publishAssetsTemplate:
  extends:
    - .publishTemplate
  image:
    name: amazon/aws-cli
    entrypoint:
      - ""
  variables:
    LOCAL_BUILD_PATH: ""
    REMOTE_BUILD_PATH: ""
    BUCKET: $AWS_S3_BUCKET
  script:
    - |
      if [[ -z $LOCAL_BUILD_PATH ]] || [[ -z $REMOTE_BUILD_PATH ]]; then
        echo "Missing variables:"
        echo " -> LOCAL_BUILD_PATH: $LOCAL_BUILD_PATH"
        echo " -> REMOTE_BUILD_PATH: $REMOTE_BUILD_PATH"
        exit 1
      else
        echo " -> Local Build Path: $LOCAL_BUILD_PATH"
        echo " -> Remote Build Path: $REMOTE_BUILD_PATH"
      fi
    - aws s3 sync $CI_PROJECT_DIR/$LOCAL_BUILD_PATH s3://${BUCKET}/$REMOTE_BUILD_PATH --acl bucket-owner-full-control --cache-control "max-age=31536000, public"
# │
# ├───────────────────────────────────────────────────
# │
.publishImageTemplate:
  extends:
    - .commonProperty
    - .publishTemplate
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint:
      - ""
  script:
    - |
      touch IMAGE.VERSION
      if [[ "$REAL_BUILD_VERSION" == "$(cat IMAGE.VERSION)" ]]; then
        echo -e "Image has already been built and pushed."
        exit 0
      fi
      cat $KANIKO_AUTH_CONFIG_FILE > /kaniko/.docker/config.json
      /kaniko/executor --single-snapshot --snapshotMode=redo --build-arg=CACHE_IMAGE=$PACKAGE_IMAGE_URI --context $CI_PROJECT_DIR --dockerfile $DOCKER_FILE --destination $AWS_IMAGE_REGISTRY/$SERVICE_IMAGE_TAG
      echo "$REAL_BUILD_VERSION" > IMAGE.VERSION
  cache:
    - key: $LOCAL_PACKAGE_NAME-image-version-$CI_COMMIT_REF_SLUG
      paths:
        - IMAGE.VERSION
      policy: pull-push
# │
# ├───────────────────────────────────────────────────
# │
.deployTemplate:
  image: node:14.8.0
  tags:
    - kubernetes
  extends:
    - .commonProperty
    - .disableCache
  retry: 2
  resource_group: deployment
  script:
    - |
      if [[ $FREEZED ]]; then
        echo -e "Deployment has been freezed during this build! Exiting..."
        exit 8
      fi
      node ./stack/bin/pushToGitopsRepo.js
      echo "DEPLOYED_VERSION=$REAL_BUILD_VERSION" > deploy-report.env
    - cat deploy-report.env
  artifacts:
    reports:
      dotenv: deploy-report.env
# │
# ├───────────────────────────────────────────────────
# │ In order for pormote action to become available,
# │ all packages should have successful build and be
# │ already published, even though each will have its
# | promote actions. We don't want to tag unstable bundles
# │
.promoteTemplate:
  stage: promote
  resource_group: neo-promotion
  tags:
    - kubernetes
  extends:
    - .gitOpsTemplate
    - .disableCache
  dependencies: []
  script:
    - |
      if [[ -z $IS_HOTFIX ]]; then
        ./scripts/release.sh -p $LOCAL_PACKAGE_NAME
      else
        git checkout $CI_COMMIT_REF_NAME
      fi
    - |
      ./scripts/release.sh -c || exit_code=$?
      exit $exit_code
  allow_failure:
    exit_codes:
      - 128 # Tag already exists
      - 10  # Unable to close merge request
# │
# ├───────────────────────────────────────────────────
# │
.notifyTemplate:
  stage: notify
  tags:
    - kubernetes
  image: fsha/release-utils:1.0.1
  cache: {}
  variables:
    JOB_CONTEXT: "$CI_PROJECT_ID,$CI_PIPELINE_ID"
    PRODUCT_NAME: "" # See packages.list for available values
    CURRENT_ENV: ""
    CURRENT_JOB: ""
    NEXT_ENV: ""
    NEXT_JOB: ""
    # DEPLOYED_VERSION: "" # Must be passed from deploy jobs
    # SKIP_NOTIFY: ""
  before_script:
    - |
      if [[ $SKIP_NOTIFY ]]; then
        echo "SKIP_NOTIFY is set. Skipping..."
        exit 0
      fi
      if [[ $IS_TAG ]]; then
        export CHANGELOG=$(bash scripts/utils/get-package-changelog.sh -p "$PRODUCT_NAME" -r)
      else
        export CHANGELOG=$(bash scripts/utils/get-package-changelog.sh -p "$PRODUCT_NAME")
      fi
  script:
    - |
      ./scripts/notify-release.sh "$PRODUCT_NAME" "$DEPLOYED_VERSION" "$CURRENT_ENV" "$JOB_CONTEXT,$CURRENT_JOB" "$NEXT_ENV" "$JOB_CONTEXT,$NEXT_JOB" "$CI_COMMIT_AUTHOR" "$CI_PIPELINE_URL" "$CHANGELOG"
  allow_failure: true
# │
# ├───────────────────────────────────────────────────
# │
.gitOpsTemplate:
  image: fsha/release-utils:1.0.1
  before_script:
    - git config --global user.name 'Tribe SysOps'
    - git config --global user.email 'devops@tribe.so'
    - export PUSH_REPO=$(echo "$CI_REPOSITORY_URL" | sed -e "s|.*@\(.*\)|\1|" -e "s|/|/|")
    - git remote set-url origin https://tribe-sys-v2:$DEPLOY_TOKEN@$PUSH_REPO
# │
# ╰───────────────────────────────────────────────────╯
